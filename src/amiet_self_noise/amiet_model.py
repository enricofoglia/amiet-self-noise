import numpy as np

import amiet_self_noise.preproc as preproc
import amiet_self_noise.radiation_integral as ri


class AmietModel:
    """
    Amiet model for aeroacoustic noise prediction from airfoils.
    
    The Amiet model is used to predict the noise generated by turbulent 
    boundary layers on airfoil surfaces. This class implements the complete
    Amiet model including wall pressure spectrum computation, coherence 
    length calculation, and radiation integral evaluation.
    
    Parameters
    ----------
    input_data : object
        Input data object containing pressure measurements, positions,
        sampling frequency, and configuration parameters.
        
    Attributes
    ----------
    input_data : object
        Stored input data object containing all necessary parameters
        and measurements for the Amiet model computation.
        
        
    .. note::

        The Amiet model is based on the theoretical framework developed by
        Amiet (1975) for predicting airfoil trailing edge noise from 
        turbulent boundary layer pressure fluctuations.
        
    References
    ----------
    .. [1] Amiet, R. K. (1975). Acoustic radiation from an airfoil in a 
           turbulent stream. Journal of Sound and Vibration, 41(4), 407-420.
    """
    
    def __init__(
        self,
        input_data,
    ):
        self.input_data = input_data

    def compute_psd(self):
        """
        Compute the power spectral density of radiated noise.
        
        This method calculates the complete power spectral density by 
        combining the wall pressure spectrum, coherence length, and 
        radiation integral with appropriate directivity corrections.
        
        Returns
        -------
        f : ndarray
            Frequency array in Hz, shape (n_freq,).
        psd : ndarray
            Power spectral density in Pa²/Hz, shape (n_freq, n_obs).
            Each column corresponds to an observer position.
            

        .. note::

            The PSD computation follows the Amiet model formulation:
            
            .. math::
                PSD = D \\cdot 2L \\cdot \\Phi_{pp} \\cdot l_y \\cdot |I|^2
                
            where D is the directivity factor, L is the airfoil length,
            Φ_pp is the wall pressure spectrum, l_y is the coherence length,
            and I is the radiation integral.

        """
        f, phi_pp = self.compute_wps()
        _, ly = self.compute_coherence()

        psd = np.zeros([len(f), self.input_data.config.n_obs])
        for i, observer in enumerate(self.input_data.config.obs):
            I = np.abs(self.compute_radiation_integral(f, observer)) ** 2
            beta2 = 1 - self.input_data.config.M0**2
            S02 = observer[0] ** 2 + beta2 * (observer[1] ** 2 + observer[2] ** 2)
            directivity = (
                observer[2]
                * f
                * self.input_data.config.b
                / self.input_data.config.c0
                / S02
            ) ** 2
            psd[:, i] = directivity * 2 * self.input_data.config.L * phi_pp * ly * I

        return f, psd

    def compute_wps(self):
        """
        Compute the wall pressure spectrum from pressure measurements.
        
        This method calculates the wall pressure spectrum using Welch's 
        method with Hanning window and 50% overlap.
        
        Returns
        -------
        f : ndarray
            Frequency array in Hz, shape (n_freq,).
        phi_pp : ndarray
            Wall pressure spectrum in Pa²·s, shape (n_freq,).
            

        .. note::

            The spectrum is computed using:

            - Segment length: N/8 samples (where N is total number of samples)
            - Overlap: 50% of segment length
            - Window: Hanning window
            - No additional filtering is applied (filter=False)

        """
        N = self.input_data.pressure.shape[1]
        nperseg = N // 8
        noverlap = nperseg // 2
        window = "hann"
        f, phi_pp = preproc.spectrum(
            self.input_data.pressure,
            fs=self.input_data.fs,
            filter=False,
            avg=0,
            nperseg=nperseg,
            noverlap=noverlap,
            window=window,
        )

        return f, phi_pp

    def compute_coherence(self):
        """
        Compute the spanwise coherence length from pressure measurements.
        
        This method calculates the spanwise coherence length which 
        characterizes the correlation of pressure fluctuations across
        the airfoil span.
        
        Returns
        -------
        f : ndarray
            Frequency array in Hz, shape (n_freq,).
        ly : ndarray
            Spanwise coherence length in meters, shape (n_freq,).
            

        .. note::

            The coherence length is computed using:

            - Bandpass filtering between 1600-8000 Hz (2nd order)
            - Reference position at the middle of the measurement array
            - Same windowing parameters as wall pressure spectrum
            - Hanning window with 50% overlap
            
        The coherence length represents the spanwise extent over which
        pressure fluctuations remain correlated.

        """
        N = self.input_data.pressure.shape[1]
        nperseg = N // 8
        noverlap = nperseg // 2
        window = "hann"
        f, ly = preproc.coherence_length(
            self.input_data.pressure,
            z=self.input_data.pos[:, 2],
            ref_index=self.input_data.pos.shape[0] // 2,
            fs=self.input_data.fs,
            filter=True,
            flims=(1600, 8000),
            order=2,
            nperseg=nperseg,
            noverlap=noverlap,
            window=window,
        )
        return f, ly

    def compute_radiation_integral(self, f, observer):
        """
        Compute the Amiet radiation integral for a given observer.
        
        The radiation integral accounts for the acoustic scattering 
        from the airfoil trailing edge and is a key component of 
        the Amiet model.
        
        Parameters
        ----------
        f : ndarray
            Frequency array in Hz, shape (n_freq,).
        observer : array_like
            Observer position [x, y, z] in meters, shape (3,).
            
        Returns
        -------
        I : ndarray, complex
            Complex radiation integral values, shape (n_freq,).
            

        .. note::

            The radiation integral is computed using:

            - Observer distance S0 corrected for Mach number effects
            - Angular frequency ω = 2πf
            - Fixed alpha parameter = 0.7 (empirical constant)
            
        The integral represents the acoustic transfer function from
        surface pressure fluctuations to far-field sound pressure.

        .. warning::

            The current version only supports constant convection velocity, fixed to 
            0.7 of the freestream velocity.

        """
        beta2 = 1 - self.input_data.config.M0**2
        S0 = np.sqrt(observer[0] ** 2 + beta2 * (observer[1] ** 2 + observer[2] ** 2))
        I = ri.compute_radiation_integral(
            omega_array=f * 2 * np.pi,  # Convert frequency to angular frequency
            U0=self.input_data.config.U0,
            c0=self.input_data.config.c0,
            x1=observer[0],
            S0=S0,
            M0=self.input_data.config.M0,
            b=self.input_data.config.b,
            alpha=0.7,  # TODO: make this a parameter in the config
        )

        return I